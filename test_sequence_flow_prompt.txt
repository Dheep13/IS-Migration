
        CRITICAL INSTRUCTION: You MUST respond with ONLY valid JSON in the exact format specified below.
        Do NOT include any XSLT, XML, code explanations, or other text formats.
        Do NOT include any markdown code blocks or formatting.

        CRITICAL JSON FORMATTING RULES:
        - ALL strings must be properly escaped (use \n for newlines, \" for quotes, \\ for backslashes)
        - Multi-line content MUST be on a single line with \n escape sequences
        - NO unescaped control characters allowed in JSON strings
        - NO actual newlines in JSON string values - use \n instead
        - NO unescaped quotes in JSON string values - use \" instead
        - Example: "script": "line1\nline2\nline3" NOT "script": "line1
line2
line3"
        - Test your JSON validity before responding

        You are an expert in Dell Boomi integration processes and SAP Integration Suite. Analyze the following
        Dell Boomi process documentation and extract the components needed for an equivalent SAP Integration Suite iFlow.

        RESPOND WITH ONLY THE JSON STRUCTURE - NO OTHER TEXT, XML, OR CODE.

        {
            "process_name": "Name of the Boomi Process",
            "description": "Description of the Boomi Process conversion",
            "endpoints": [
                {
                    "method": "HTTP method (GET, POST, etc.) - derived from Boomi connectors",
                    "path": "Path of the endpoint - derived from Boomi process flow",
                    "purpose": "Purpose of the process - derived from Boomi process documentation",
                    "components": [
                        {
                            "type": "Component type - MUST be one of: enricher, request_reply, json_to_xml_converter, groovy_script, odata, odata_receiver (DO NOT use start_event or end_event). Map from Boomi components: Boomi Map→message_mapping, Boomi Connector→request_reply, Boomi Document Properties→enricher, Boomi Decision→router",
                            "name": "Component name - should be descriptive and indicate Boomi origin (e.g., 'Map_CustomerData_from_Boomi')",
                            "id": "Component ID - must be unique across all components",
                            "config": {
                                "endpoint_path": "For request_reply components, the path of the endpoint",
                                "content": "For content_modifier components, the content to set",
                                "script": "For groovy_script components, the name of the script file",
                                "address": "For odata components, the URL of the OData service",
                                "resource_path": "For odata components, the entity set or resource path to query",
                                "operation": "For odata components, the operation to perform (Query(GET), Create(POST), etc.)",
                                "query_options": "For odata components, query options like select, filter, etc."
                            }
                        }
                    ],
                    "error_handling": {
                        "exception_subprocess": [
                            {
                                "type": "Component type for error handling (enricher, groovy_script, request_reply for notifications)",
                                "name": "Error handling component name",
                                "id": "Unique ID for error component",
                                "trigger": "What triggers this error handler (validation_error, connection_error, etc.)",
                                "config": {}
                            }
                        ]
                    },
                    "branching": {
                        "type": "parallel or exclusive - based on Boomi branch behavior",
                        "branches": [
                            {
                                "condition": "Condition for this branch (if exclusive)",
                                "components": ["List of component IDs for this branch"],
                                "sequence": ["Order of components in this branch"]
                            }
                        ]
                    },
                    "sequence": [
                        "List of component IDs in the order they should be connected",
                        "CRITICAL: Transform BEFORE external calls",
                        "For example: ['enricher_1', 'transform_1', 'odata_1']",
                        "WRONG: ['enricher_1', 'odata_1', 'transform_1'] - This will FAIL"
                    ],
                    "transformations": [
                        {
                            "name": "Transformation name (e.g., 'TransformProductData.groovy')",
                            "type": "groovy",
                            "script": "Actual Groovy script content"
                        }
                    ]
                }
            ]
        }

        CRITICAL REQUIREMENTS FOR BOOMI TO SAP CONVERSION:

        1. The JSON structure MUST be valid and complete
        2. Each component MUST have a unique ID
        3. Component types MUST be one of the allowed types listed above
        4. The "sequence" array MUST list ONLY the main happy path component IDs in order
        5. Error handling components should be in separate "error_handling" section

        CRITICAL SEQUENCE FLOW RULES (MANDATORY):
        6. Data transformation MUST happen BEFORE external system calls
        7. Correct sequence order: enricher → transform → external_call (odata/request_reply)
        8. NEVER put transformation AFTER external calls - this will cause production failures
        9. Raw input data must be transformed BEFORE sending to external systems
        10. Example correct sequence: ["enricher_1", "transform_1", "odata_1"]
        11. Example WRONG sequence: ["enricher_1", "odata_1", "transform_1"] ← This will FAIL

        12. Map Boomi components to SAP equivalents:
           - Boomi Start Shape → (handled automatically by SAP start_event)
           - Boomi Connector (Listen) → request_reply with receiver configuration
           - Boomi Map/Transform (type="transform.map") → message_mapping or groovy_script for transformations
           - Boomi Connector Action (type="connector-action") → request_reply with receiver adapter configuration
           - Boomi Salesforce Connector Action → request_reply with odata_adapter receiver for Salesforce REST API
           - Boomi Document Properties → enricher for message modification
           - Boomi Decision → router for conditional logic
           - Boomi Stop Shape → (handled automatically by SAP end_event)
           - Boomi <error-path> → Exception Subprocess in SAP Integration Suite
           - Boomi <try-path> → Main process flow in SAP Integration Suite
           - Boomi <branch> → Parallel or Exclusive Gateway in SAP Integration Suite

        6. SPECIFIC BOOMI COMPONENT PATTERNS TO RECOGNIZE:
           - Transform/Map Components: Look for <Map>, <Mappings>, <Functions> elements
           - Connector Actions: Look for <Operation>, subType attributes (e.g., "salesforce")
           - Document Properties: Look for DocumentPropertyGet functions
           - Field Mappings: Extract fromKey/toKey mappings for data transformation logic
           - Object Actions: Identify CRUD operations (create, read, update, delete)

        7. BOOMI ERROR HANDLING AND BRANCHING PATTERNS:
           - <error-path>: Convert to Exception Subprocess with error handling components
           - <try-path>: Convert to main process flow components
           - <branch>: Convert to Parallel or Exclusive Gateway based on business rules
           - Error notifications (email, logging): Convert to request_reply components in exception subprocess
           - Retry logic: Convert to groovy_script components with retry configuration

        8. SALESFORCE-SPECIFIC CONVERSIONS:
           - Boomi Salesforce Connector → Request Reply with OData Receiver Adapter
           - SalesforceSendAction with objectAction="create" → Request Reply + OData POST operation
           - Salesforce field mappings → JSON/XML transformation scripts
           - IMPORTANT: Always include "receiver_adapter" with "type": "odata_adapter" for Salesforce operations

           CRITICAL SALESFORCE SEQUENCE EXAMPLE:
           For Stripe → Salesforce integration, the sequence MUST be:
           ["enricher_1", "transform_1", "request_reply_1"]
           NOT: ["enricher_1", "request_reply_1", "transform_1"] ← This sends raw Stripe JSON to Salesforce and FAILS

        9. CRITICAL ERROR HANDLING RULES:
           - If you see <error-path> in Boomi XML, create "error_handling" section
           - Error components should NOT be in the main "sequence" array
           - Error handlers should be triggered by exceptions, not sequential flow
           - Email notifications should be request_reply components in error_handling
           - Retry logic should be groovy_script components with retry configuration
        6. For OData operations (if Boomi process includes OData connectors), use the dedicated "odata" component type:
           Example: {"type": "odata", "name": "Get_Products", "id": "odata_1", "config": {"address": "https://example.com/odata/service", "resource_path": "Products", "operation": "Query(GET)", "query_options": "$select=Id,Name,Description"}}

           IMPORTANT: OData components in SAP Integration Suite require a specific implementation:
           - The OData component must be implemented as a service task with activityType="ExternalCall"
           - The OData receiver must be implemented as a participant with ifl:type="EndpointReceiver"
           - The participant must be positioned OUTSIDE the collaboration perimeter
           - The service task and participant must be connected via a message flow
           - All three components (service task, participant, message flow) must have proper BPMN diagram elements

           CRITICAL: DO NOT use IDs that start with "ServiceTask_OData_" for your components.
           These will be automatically generated by the system. Instead, use IDs like "odata_1", "odata_get_products", etc.

           IMPORTANT: When using the "odata" component type, DO NOT create additional enricher components for it.
           The OData component is self-contained and does not need any additional enricher components.
           The system will automatically create the necessary OData components (service task, participant, message flow).

           Here is a complete example of the OData request-reply pattern:

           <!-- Service Task for OData Request -->
           <bpmn2:serviceTask id="ServiceTask_OData_products" name="Get_Products">
               <bpmn2:extensionElements>
                   <ifl:property>
                       <key>componentVersion</key>
                       <value>1.0</value>
                   </ifl:property>
                   <ifl:property>
                       <key>activityType</key>
                       <value>ExternalCall</value>
                   </ifl:property>
                   <ifl:property>
                       <key>cmdVariantUri</key>
                       <value>ctype::FlowstepVariant/cname::ExternalCall/version::1.0.4</value>
                   </ifl:property>
               </bpmn2:extensionElements>
               <bpmn2:incoming>SequenceFlow_In</bpmn2:incoming>
               <bpmn2:outgoing>SequenceFlow_Out</bpmn2:outgoing>
           </bpmn2:serviceTask>

           <!-- OData Receiver Participant -->
           <bpmn2:participant id="Participant_OData_products" ifl:type="EndpointRecevier" name="OData_Products">
               <bpmn2:extensionElements>
                   <ifl:property>
                       <key>ifl:type</key>
                       <value>EndpointRecevier</value>
                   </ifl:property>
               </bpmn2:extensionElements>
           </bpmn2:participant>

           <!-- Message Flow connecting Service Task to OData Receiver -->
           <bpmn2:messageFlow id="MessageFlow_OData_products" name="OData" sourceRef="ServiceTask_OData_products" targetRef="Participant_OData_products">
               <bpmn2:extensionElements>
                   <ifl:property>
                       <key>Description</key>
                       <value>OData Connection to Products</value>
                   </ifl:property>
                   <ifl:property>
                       <key>pagination</key>
                       <value>0</value>
                   </ifl:property>
                   <ifl:property>
                       <key>ComponentNS</key>
                       <value>sap</value>
                   </ifl:property>
                   <ifl:property>
                       <key>resourcePath</key>
                       <value>Products</value>
                   </ifl:property>
                   <ifl:property>
                       <key>TransportProtocolVersion</key>
                       <value>1.25.0</value>
                   </ifl:property>
                   <ifl:property>
                       <key>ComponentSWCVName</key>
                       <value>external</value>
                   </ifl:property>
                   <ifl:property>
                       <key>enableMPLAttachments</key>
                       <value>true</value>
                   </ifl:property>
                   <ifl:property>
                       <key>contentType</key>
                       <value>application/atom+xml</value>
                   </ifl:property>
                   <ifl:property>
                       <key>ComponentSWCVId</key>
                       <value>1.25.0</value>
                   </ifl:property>
                   <ifl:property>
                       <key>MessageProtocol</key>
                       <value>OData V2</value>
                   </ifl:property>
                   <ifl:property>
                       <key>direction</key>
                       <value>Receiver</value>
                   </ifl:property>
                   <ifl:property>
                       <key>ComponentType</key>
                       <value>HCIOData</value>
                   </ifl:property>
                   <ifl:property>
                       <key>address</key>
                       <value>https://example.com/odata/service</value>
                   </ifl:property>
                   <ifl:property>
                       <key>queryOptions</key>
                       <value>$select=Id,Name,Description</value>
                   </ifl:property>
                   <ifl:property>
                       <key>proxyType</key>
                       <value>default</value>
                   </ifl:property>
                   <ifl:property>
                       <key>isCSRFEnabled</key>
                       <value>true</value>
                   </ifl:property>
                   <ifl:property>
                       <key>componentVersion</key>
                       <value>1.25</value>
                   </ifl:property>
                   <ifl:property>
                       <key>operation</key>
                       <value>Query(GET)</value>
                   </ifl:property>
                   <ifl:property>
                       <key>MessageProtocolVersion</key>
                       <value>1.25.0</value>
                   </ifl:property>
                   <ifl:property>
                       <key>TransportProtocol</key>
                       <value>HTTP</value>
                   </ifl:property>
                   <ifl:property>
                       <key>cmdVariantUri</key>
                       <value>ctype::AdapterVariant/cname::sap:HCIOData/tp::HTTP/mp::OData V2/direction::Receiver/version::1.25.0</value>
                   </ifl:property>
                   <ifl:property>
                       <key>authenticationMethod</key>
                       <value>None</value>
                   </ifl:property>
               </bpmn2:extensionElements>
           </bpmn2:messageFlow>

           <!-- BPMN Diagram Elements for OData Components -->
           <bpmndi:BPMNShape bpmnElement="ServiceTask_OData_products" id="BPMNShape_ServiceTask_OData_products">
               <dc:Bounds height="60.0" width="100.0" x="400.0" y="150.0"/>
           </bpmndi:BPMNShape>

           <bpmndi:BPMNShape bpmnElement="Participant_OData_products" id="BPMNShape_Participant_OData_products">
               <dc:Bounds height="140.0" width="100.0" x="400.0" y="341.0"/>
           </bpmndi:BPMNShape>

           <bpmndi:BPMNEdge bpmnElement="MessageFlow_OData_products" id="BPMNEdge_MessageFlow_OData_products" sourceElement="BPMNShape_ServiceTask_OData_products" targetElement="BPMNShape_Participant_OData_products">
               <di:waypoint x="450.0" xsi:type="dc:Point" y="210.0"/>
               <di:waypoint x="450.0" xsi:type="dc:Point" y="341.0"/>
           </bpmndi:BPMNEdge>

        6. For each endpoint, include at minimum:
           - An enricher component to prepare the request (NOT content_modifier)
           - A request_reply component to handle the external call (which requires a receiver participant and message flow)
           - An enricher component to format the response (NOT content_modifier)

        Example of a valid component sequence for an OData endpoint:
        "sequence": ["StartEvent_2", "JSONtoXMLConverter_root", "odata_1"]

        IMPORTANT: Notice that for OData components, you don't need to add enricher components before or after them.
        The OData component itself handles all the necessary processing.

        EXAMPLE BOOMI TO SAP CONVERSION:

        If you see Boomi XML like:
        <Component type="transform.map">
          <Map fromProfile="..." toProfile="...">
            <Mappings>
              <Mapping fromKey="customerName" toKey="Name"/>
            </Mappings>
          </Map>
        </Component>

        Convert to:
        {
          "type": "groovy_script",
          "name": "Transform_Customer_Data",
          "id": "transform_1",
          "config": {
            "script": "TransformCustomerData.groovy"
          }
        }

        If you see Boomi XML like:
        <Component type="connector-action" subType="salesforce">
          <Operation>
            <SalesforceSendAction objectAction="create" objectName="Opportunity"/>
          </Operation>
        </Component>

        Convert to:
        {
          "type": "request_reply",
          "name": "Create_Salesforce_Opportunity",
          "id": "request_reply_1",
          "receiver_adapter": {
            "type": "odata_adapter",
            "operation": "POST",
            "endpoint": "/services/data/v52.0/sobjects/Opportunity",
            "connection": "salesforce_odata_connection"
          },
          "config": {
            "endpoint_path": "/services/data/v52.0/sobjects/Opportunity",
            "method": "POST"
          }
        }

        EXAMPLE ERROR HANDLING CONVERSION:

        If you see Boomi XML like:
        <step type="SetProperties">
          <error-path>
            <step type="Message">Error Notification</step>
            <step type="ConnectorAction">Send Email</step>
          </error-path>
        </step>
        <try-path>
          <step type="ConnectorAction">Query Data</step>
          <step type="Map">Transform Data</step>
        </try-path>

        Convert to:
        {
          "sequence": ["query_data", "transform_data"],
          "components": [
            {"type": "request_reply", "name": "Query Data", "id": "query_data"},
            {"type": "groovy_script", "name": "Transform Data", "id": "transform_data"}
          ],
          "error_handling": {
            "exception_subprocess": [
              {"type": "enricher", "name": "Error Message", "id": "error_msg", "trigger": "any_error"},
              {"type": "request_reply", "name": "Send Email", "id": "send_email", "trigger": "any_error"}
            ]
          }
        }

        FINAL REMINDER: Your response must be ONLY the JSON structure shown above.
        Do NOT include any explanations, XML, XSLT, or other content.
        Start your response with { and end with }.

        CRITICAL ERROR HANDLING REMINDER:
        - Main "sequence" array = happy path components only
        - "error_handling" section = exception subprocess components only
        - Error components should NEVER be in the main sequence
        - If you see <error-path> or error handling in Boomi, use "error_handling" section

        JSON ESCAPING EXAMPLE - DO THIS:
        {
          "config": {
            "script": "def message = 'Hello'\nreturn message"
          }
        }

        NOT THIS (INVALID):
        {
          "config": {
            "script": "def message = 'Hello'
        return message"
          }
        }

        Analyze the following Dell Boomi process documentation and convert it to SAP Integration Suite equivalent:
        

Boomi Documentation:
Test markdown content

RESPOND WITH ONLY JSON: