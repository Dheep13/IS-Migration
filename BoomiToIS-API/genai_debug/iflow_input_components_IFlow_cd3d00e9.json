{
  "process_name": "Create Salesforce Opportunities from Stripe Subscriptions",
  "description": "This integration creates Salesforce Opportunities from Stripe Subscriptions. When a new subscription is created in Stripe, the integration listens for the subscription event via a webhook, transforms the data, and creates a corresponding Opportunity record in Salesforce.",
  "endpoints": [
    {
      "method": "POST",
      "path": "/webhook-endpoint",
      "purpose": "Receives subscription events from Stripe and creates Salesforce Opportunities",
      "components": [
        {
          "type": "enricher",
          "name": "Set_Dynamic_Properties",
          "id": "enricher_1",
          "config": {
            "content": "Description=${body.subscription.description}\nName=${body.subscription.name}\nCloseDate=${body.subscription.current_period_end}"
          }
        },
        {
          "type": "request_reply",
          "name": "Create_Salesforce_Opportunity",
          "id": "request_reply_1",
          "config": {
            "endpoint_path": "/services/data/v52.0/sobjects/Opportunity",
            "address": "https://{{salesforce_instance}}.salesforce.com"
          }
        },
        {
          "type": "groovy_script",
          "name": "Transform_Subscription_To_Opportunity",
          "id": "transform_1",
          "config": {
            "script": "TransformSubscriptionToOpportunity.groovy"
          }
        }
      ],
      "error_handling": {
        "exception_subprocess": [
          {
            "type": "enricher",
            "name": "Set_Error_Message",
            "id": "error_enricher_1",
            "trigger": "any_error",
            "config": {
              "content": "ErrorMessage=${exception.message}\nErrorCode=${exception.code}\nErrorSource=${exception.source}"
            }
          },
          {
            "type": "groovy_script",
            "name": "Log_Error_Details",
            "id": "error_script_1",
            "trigger": "any_error",
            "config": {
              "script": "LogErrorDetails.groovy"
            }
          }
        ]
      },
      "branching": {
        "type": "exclusive",
        "branches": [
          {
            "condition": "Default path",
            "components": [
              "enricher_1",
              "transform_1",
              "request_reply_1"
            ],
            "sequence": [
              "enricher_1",
              "transform_1",
              "request_reply_1"
            ]
          }
        ]
      },
      "sequence": [
        "enricher_1",
        "transform_1",
        "request_reply_1"
      ],
      "transformations": [
        {
          "name": "TransformSubscriptionToOpportunity.groovy",
          "type": "groovy",
          "script": "import groovy.json.*\nimport groovy.xml.*\n\ndef jsonSlurper = new JsonSlurper()\ndef body = jsonSlurper.parseText(message.getBody(String.class))\n\ndef writer = new StringWriter()\ndef builder = new MarkupBuilder(writer)\n\nbuilder.Opportunity {\n    Description(body.subscription.description ?: 'Subscription from Stripe')\n    Name(body.subscription.name ?: 'New Stripe Subscription')\n    CloseDate(body.subscription.current_period_end ? new Date(body.subscription.current_period_end * 1000).format('yyyy-MM-dd') : new Date().format('yyyy-MM-dd'))\n    StageName('Closed Won')\n    Amount(body.subscription.plan?.amount ? (body.subscription.plan.amount / 100) : 0)\n    Type('New Business')\n}\n\nmessage.setBody(writer.toString())"
        },
        {
          "name": "LogErrorDetails.groovy",
          "type": "groovy",
          "script": "import groovy.json.*\n\ndef errorDetails = [\n    message: properties.get('ErrorMessage'),\n    code: properties.get('ErrorCode'),\n    source: properties.get('ErrorSource'),\n    timestamp: new Date().format('yyyy-MM-dd HH:mm:ss')\n]\n\nlogger.error(\"Integration Error: ${new JsonBuilder(errorDetails).toString()}\")\n\nreturn message"
        }
      ],
      "sequence_flows": [
        {
          "id": "SequenceFlow_Start",
          "source": "enricher_1",
          "target": "request_reply_1",
          "is_immediate": true,
          "xml_content": "<bpmn2:sequenceFlow id=\"SequenceFlow_Start\" sourceRef=\"enricher_1\" targetRef=\"request_reply_1\" isImmediate=\"true\"/>"
        },
        {
          "id": "SequenceFlow_End",
          "source": "request_reply_1",
          "target": "transform_1",
          "is_immediate": true,
          "xml_content": "<bpmn2:sequenceFlow id=\"SequenceFlow_End\" sourceRef=\"request_reply_1\" targetRef=\"transform_1\" isImmediate=\"true\"/>"
        }
      ]
    }
  ]
}