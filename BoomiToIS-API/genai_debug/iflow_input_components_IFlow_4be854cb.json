{
  "process_name": "Create Salesforce Opportunities from Stripe Subscriptions",
  "description": "This integration receives Stripe subscription webhook events, transforms the data, and creates corresponding Salesforce Opportunities. The process validates the Stripe webhook signature, transforms subscription data to Salesforce Opportunity format, and sends the data to Salesforce using OData.",
  "endpoints": [
    {
      "method": "POST",
      "path": "/webhook/stripe/subscription",
      "purpose": "Receives webhook notifications from Stripe when subscription events occur and creates corresponding Salesforce Opportunities",
      "components": [
        {
          "type": "enricher",
          "name": "Set_Dynamic_Properties",
          "id": "enricher_dynamic_props",
          "config": {
            "content": "salesforce.auth.token=${property.salesforce.auth.token};\nsalesforce.instance.url=${property.salesforce.instance.url};\nstripe.webhook.secret=${property.stripe.webhook.secret};"
          }
        },
        {
          "type": "enricher",
          "name": "Prepare_Salesforce_Payload",
          "id": "enricher_prepare_sf_payload",
          "config": {
            "content": "// Set Salesforce headers\nContent-Type=application/json;\nAuthorization=Bearer ${property.salesforce.auth.token};"
          }
        },
        {
          "type": "odata",
          "name": "Create_Salesforce_Opportunity",
          "id": "odata_create_opportunity",
          "config": {
            "address": "${property.salesforce.instance.url}",
            "resource_path": "services/data/v55.0/sobjects/Opportunity",
            "operation": "Create(POST)",
            "content_type": "application/json"
          }
        },
        {
          "type": "enricher",
          "name": "Validate_Stripe_Signature",
          "id": "enricher_validate_signature",
          "config": {
            "content": "// Add header validation logic\n${header.Stripe-Signature}"
          }
        },
        {
          "type": "request_reply",
          "name": "Stripe_Webhook_Receiver",
          "id": "webhook_receiver_1",
          "config": {
            "endpoint_path": "/webhook/stripe/subscription",
            "method": "POST",
            "content_type": "application/json"
          }
        },
        {
          "type": "groovy_script",
          "name": "Transform_Subscription_To_Opportunity",
          "id": "script_transform_data",
          "config": {
            "script": "TransformSubscriptionToOpportunity.groovy"
          }
        }
      ],
      "sequence": [
        "webhook_receiver_1",
        "enricher_validate_signature",
        "enricher_dynamic_props",
        "script_transform_data",
        "enricher_prepare_sf_payload",
        "odata_create_opportunity"
      ],
      "transformations": [
        {
          "name": "TransformSubscriptionToOpportunity.groovy",
          "type": "groovy",
          "script": "import groovy.json.*\n\ndef inputBody = message.getBody(String.class)\ndef jsonSlurper = new JsonSlurper()\ndef subscription = jsonSlurper.parseText(inputBody)\n\n// Extract subscription data\ndef subscriptionObj = subscription.data.object\ndef subscriptionId = subscriptionObj.id\ndef customer = subscriptionObj.customer\ndef amount = 0\n\n// Calculate amount if available\nif (subscriptionObj.items && subscriptionObj.items.data && subscriptionObj.items.data.size() > 0) {\n    def item = subscriptionObj.items.data[0]\n    if (item.price && item.price.unit_amount) {\n        amount = item.price.unit_amount / 100 // Convert from cents to dollars\n    }\n}\n\n// Format date (convert Unix timestamp to ISO date)\ndef closeDate = new Date(subscriptionObj.created * 1000).format('yyyy-MM-dd')\n\n// Create Salesforce Opportunity JSON\ndef opportunity = [\n    'Name': \"Subscription for Customer ${customer}\",\n    'Description': \"Stripe Subscription ${subscriptionId}\",\n    'CloseDate': closeDate,\n    'StageName': 'Closed Won',\n    'Amount': amount,\n    'CurrencyIsoCode': subscriptionObj.items?.data[0]?.price?.currency?.toUpperCase() ?: 'USD'\n]\n\n// Set the transformed body\nmessage.setBody(JsonOutput.toJson(opportunity))\nreturn message"
        }
      ],
      "sequence_flows": [
        {
          "id": "SequenceFlow_Start",
          "source": "enricher_dynamic_props",
          "target": "enricher_prepare_sf_payload",
          "is_immediate": true,
          "xml_content": "<bpmn2:sequenceFlow id=\"SequenceFlow_Start\" sourceRef=\"enricher_dynamic_props\" targetRef=\"enricher_prepare_sf_payload\" isImmediate=\"true\"/>"
        },
        {
          "id": "SequenceFlow_1",
          "source": "enricher_prepare_sf_payload",
          "target": "odata_create_opportunity",
          "is_immediate": true,
          "xml_content": "<bpmn2:sequenceFlow id=\"SequenceFlow_1\" sourceRef=\"enricher_prepare_sf_payload\" targetRef=\"odata_create_opportunity\" isImmediate=\"true\"/>"
        },
        {
          "id": "SequenceFlow_2",
          "source": "odata_create_opportunity",
          "target": "enricher_validate_signature",
          "is_immediate": true,
          "xml_content": "<bpmn2:sequenceFlow id=\"SequenceFlow_2\" sourceRef=\"odata_create_opportunity\" targetRef=\"enricher_validate_signature\" isImmediate=\"true\"/>"
        },
        {
          "id": "SequenceFlow_3",
          "source": "enricher_validate_signature",
          "target": "webhook_receiver_1",
          "is_immediate": true,
          "xml_content": "<bpmn2:sequenceFlow id=\"SequenceFlow_3\" sourceRef=\"enricher_validate_signature\" targetRef=\"webhook_receiver_1\" isImmediate=\"true\"/>"
        },
        {
          "id": "SequenceFlow_End",
          "source": "webhook_receiver_1",
          "target": "script_transform_data",
          "is_immediate": true,
          "xml_content": "<bpmn2:sequenceFlow id=\"SequenceFlow_End\" sourceRef=\"webhook_receiver_1\" targetRef=\"script_transform_data\" isImmediate=\"true\"/>"
        }
      ]
    }
  ]
}