{
  "process_name": "Customer Data Sync",
  "description": "Synchronizes customer data between Salesforce CRM and SAP ERP system on a daily basis",
  "endpoints": [
    {
      "method": "GET",
      "path": "/salesforce/accounts",
      "purpose": "Extract Salesforce Account data and sync to SAP ERP Customer Master",
      "components": [
        {
          "type": "enricher",
          "name": "Validate_Required_Fields",
          "id": "validate_fields_1",
          "config": {
            "content": "// Check for required fields\n${property.set(\"hasRequiredFields\", (message.getBody(java.lang.String) contains \"Id\" && message.getBody(java.lang.String) contains \"Name\"))}"
          }
        },
        {
          "type": "request_reply",
          "name": "Salesforce_Account_Query",
          "id": "salesforce_query_1",
          "config": {
            "endpoint_path": "/services/data/v52.0/query",
            "content": "SELECT Id, Name, BillingStreet, BillingCity, BillingState, BillingPostalCode, Phone, Industry, AnnualRevenue, CreatedDate, LastModifiedDate FROM Account WHERE LastModifiedDate >= YESTERDAY"
          }
        },
        {
          "type": "request_reply",
          "name": "SAP_ERP_Customer_Update",
          "id": "sap_update_1",
          "config": {
            "endpoint_path": "/sap/opu/odata/sap/API_BUSINESS_PARTNER/A_BusinessPartner"
          }
        },
        {
          "type": "groovy_script",
          "name": "Transform_Customer_Data",
          "id": "transform_data_1",
          "config": {
            "script": "TransformCustomerData.groovy"
          }
        }
      ],
      "error_handling": {
        "exception_subprocess": [
          {
            "type": "enricher",
            "name": "Prepare_Error_Message",
            "id": "error_message_1",
            "trigger": "validation_error",
            "config": {
              "content": "${property.set(\"errorMessage\", \"Validation error occurred: \" + exception.getMessage())}"
            }
          },
          {
            "type": "groovy_script",
            "name": "Retry_Logic",
            "id": "retry_script_1",
            "trigger": "connection_error",
            "config": {
              "script": "RetryFailedRecords.groovy"
            }
          },
          {
            "type": "request_reply",
            "name": "Send_Error_Notification",
            "id": "error_notification_1",
            "trigger": "any_error",
            "config": {
              "endpoint_path": "/notification/email"
            }
          }
        ]
      },
      "branching": {
        "type": "exclusive",
        "branches": [
          {
            "condition": "${property.get(\"hasRequiredFields\") == true}",
            "components": [
              "transform_data_1",
              "sap_update_1"
            ],
            "sequence": [
              "transform_data_1",
              "sap_update_1"
            ]
          },
          {
            "condition": "${property.get(\"hasRequiredFields\") == false}",
            "components": [
              "error_message_1"
            ],
            "sequence": [
              "error_message_1"
            ]
          }
        ]
      },
      "sequence": [
        "salesforce_query_1",
        "validate_fields_1",
        "transform_data_1",
        "sap_update_1"
      ],
      "transformations": [
        {
          "name": "TransformCustomerData.groovy",
          "type": "groovy",
          "script": "import groovy.json.*\n\ndef inputBody = message.getBody(String.class)\ndef jsonSlurper = new JsonSlurper()\ndef accounts = jsonSlurper.parseText(inputBody).records\ndef customers = []\n\naccounts.each { account ->\n    def customer = [:]\n    \n    // Direct mapping\n    customer.CustomerNumber = account.Id\n    \n    // Name mapping with truncation\n    customer.CustomerName = account.Name.length() > 40 ? account.Name.substring(0, 40) : account.Name\n    \n    // Address concatenation\n    def address = [account.BillingStreet, account.BillingCity, account.BillingState, account.BillingPostalCode].findAll{it}.join(', ')\n    customer.Address = address\n    \n    // Phone formatting - remove special characters\n    customer.Telephone = account.Phone ? account.Phone.replaceAll('[^0-9]', '') : ''\n    \n    // Industry code mapping\n    def industryMap = [\n        'Technology': 'TECH',\n        'Healthcare': 'HLTH',\n        'Manufacturing': 'MANU',\n        'Financial Services': 'FINC'\n    ]\n    customer.IndustryCode = industryMap[account.Industry] ?: 'OTHR'\n    \n    // Credit limit calculation\n    def annualRevenue = account.AnnualRevenue ? account.AnnualRevenue : 0\n    def creditLimit = annualRevenue * 0.1\n    \n    // Apply min/max constraints\n    if (creditLimit < 1000) creditLimit = 1000\n    if (creditLimit > 1000000) creditLimit = 1000000\n    \n    customer.CreditLimit = creditLimit\n    \n    customers.add(customer)\n}\n\n// Convert to JSON\ndef jsonBuilder = new JsonBuilder(customers)\nreturn jsonBuilder.toString()"
        },
        {
          "name": "RetryFailedRecords.groovy",
          "type": "groovy",
          "script": "import groovy.json.*\n\ndef retryCount = property.get(\"retryCount\") ?: 0\nretryCount = retryCount.toInteger() + 1\n\nif (retryCount <= 3) {\n    // Store retry count\n    property.set(\"retryCount\", retryCount.toString())\n    \n    // Wait for 5 minutes (300000 ms) before retry\n    Thread.sleep(300000)\n    \n    // Return original message for retry\n    return message\n} else {\n    // Max retries reached, prepare error message\n    def errorMsg = [\"status\": \"error\", \"message\": \"Maximum retry attempts reached\", \"details\": exception.getMessage()]\n    def jsonBuilder = new JsonBuilder(errorMsg)\n    \n    // Set error message for notification\n    property.set(\"errorMessage\", \"Maximum retry attempts (3) reached: \" + exception.getMessage())\n    \n    return jsonBuilder.toString()\n}"
        }
      ],
      "sequence_flows": [
        {
          "id": "SequenceFlow_Start",
          "source": "validate_fields_1",
          "target": "salesforce_query_1",
          "is_immediate": true,
          "xml_content": "<bpmn2:sequenceFlow id=\"SequenceFlow_Start\" sourceRef=\"validate_fields_1\" targetRef=\"salesforce_query_1\" isImmediate=\"true\"/>"
        },
        {
          "id": "SequenceFlow_1",
          "source": "salesforce_query_1",
          "target": "sap_update_1",
          "is_immediate": true,
          "xml_content": "<bpmn2:sequenceFlow id=\"SequenceFlow_1\" sourceRef=\"salesforce_query_1\" targetRef=\"sap_update_1\" isImmediate=\"true\"/>"
        },
        {
          "id": "SequenceFlow_End",
          "source": "sap_update_1",
          "target": "transform_data_1",
          "is_immediate": true,
          "xml_content": "<bpmn2:sequenceFlow id=\"SequenceFlow_End\" sourceRef=\"sap_update_1\" targetRef=\"transform_data_1\" isImmediate=\"true\"/>"
        }
      ]
    }
  ]
}