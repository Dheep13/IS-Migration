{
  "process_name": "PepsiCo EC372 - Employee Central to NAVEX Integration",
  "description": "Comprehensive employee data synchronization system that extracts employee information from SAP SuccessFactors Employee Central and transmits it to NAVEX Global for compliance and ethics management with delta processing, error handling, and multi-destination file distribution",
  "endpoints": [
    {
      "method": "GET",
      "path": "/employee-sync",
      "purpose": "Synchronize employee demographic data from Employee Central to NAVEX Global with delta processing support",
      "components": [
        {
          "type": "enricher",
          "name": "Delta_Run_Decision_Setup",
          "id": "delta_decision_1",
          "config": {
            "content": "Set up delta run decision properties and last success run date validation"
          }
        },
        {
          "type": "request_reply",
          "name": "Extract_Employee_Data",
          "id": "ec_extract_1",
          "config": {
            "endpoint_path": "/odata/v2/EmpJob"
          }
        },
        {
          "type": "enricher",
          "name": "File_Preparation_Properties",
          "id": "file_prep_1",
          "config": {
            "content": "Set file naming, encryption flags, and distribution properties"
          }
        },
        {
          "type": "enricher",
          "name": "Update_Last_Success_Date",
          "id": "update_lsrd_1",
          "config": {
            "content": "Update LastSuccessRunDate property with current timestamp"
          }
        },
        {
          "type": "groovy_script",
          "name": "Dynamic_WHERE_Clause_Construction",
          "id": "where_clause_1",
          "config": {
            "script": "ConstructWhereClause.groovy"
          }
        },
        {
          "type": "groovy_script",
          "name": "Generate_Control_Report",
          "id": "control_report_1",
          "config": {
            "script": "GenerateControlReport.groovy"
          }
        },
        {
          "type": "request_reply",
          "name": "Query_Picklist_Values",
          "id": "picklist_query_1",
          "config": {
            "endpoint_path": "/odata/v2/PicklistOption"
          }
        },
        {
          "type": "request_reply",
          "name": "SFTP_Distribution_NAVEX",
          "id": "sftp_navex_1",
          "config": {
            "endpoint_path": "/upload/navex"
          }
        },
        {
          "type": "request_reply",
          "name": "SFTP_Distribution_PepsiCo",
          "id": "sftp_pepsi_1",
          "config": {
            "endpoint_path": "/upload/pepsi"
          }
        },
        {
          "type": "request_reply",
          "name": "Send_Email_Notification",
          "id": "email_notify_1",
          "config": {
            "endpoint_path": "/notifications/email"
          }
        },
        {
          "type": "groovy_script",
          "name": "Transform_EC_to_NAVEX_Data",
          "id": "transform_main_1",
          "config": {
            "script": "TransformECToNAVEX.groovy"
          }
        }
      ],
      "error_handling": {
        "exception_subprocess": [
          {
            "type": "enricher",
            "name": "Error_Message_Preparation",
            "id": "error_prep_1",
            "trigger": "validation_error",
            "config": {
              "content": "Prepare error message with GPID, severity, and error text"
            }
          },
          {
            "type": "groovy_script",
            "name": "Error_Message_Mapping",
            "id": "error_map_1",
            "trigger": "any_error",
            "config": {
              "script": "MapErrorMessages.groovy"
            }
          },
          {
            "type": "request_reply",
            "name": "Send_Error_Notification",
            "id": "error_notify_1",
            "trigger": "critical_error",
            "config": {
              "endpoint_path": "/notifications/error"
            }
          },
          {
            "type": "enricher",
            "name": "Error_Statistics_Update",
            "id": "error_stats_1",
            "trigger": "any_error",
            "config": {
              "content": "Update error count and processing statistics"
            }
          }
        ]
      },
      "branching": {
        "type": "exclusive",
        "branches": [
          {
            "condition": "LastSuccessRunDate is NULL",
            "components": [
              "delta_decision_1",
              "where_clause_1",
              "picklist_query_1",
              "ec_extract_1"
            ],
            "sequence": [
              "delta_decision_1",
              "where_clause_1",
              "picklist_query_1",
              "ec_extract_1"
            ]
          },
          {
            "condition": "LastSuccessRunDate exists",
            "components": [
              "where_clause_1",
              "picklist_query_1",
              "ec_extract_1"
            ],
            "sequence": [
              "where_clause_1",
              "picklist_query_1",
              "ec_extract_1"
            ]
          }
        ]
      },
      "sequence": [
        "delta_decision_1",
        "where_clause_1",
        "picklist_query_1",
        "ec_extract_1",
        "transform_main_1",
        "file_prep_1",
        "sftp_navex_1",
        "sftp_pepsi_1",
        "control_report_1",
        "email_notify_1",
        "update_lsrd_1"
      ],
      "transformations": [
        {
          "name": "ConstructWhereClause.groovy",
          "type": "groovy",
          "script": "import com.sap.gateway.ip.core.customdev.util.Message\nimport java.util.HashMap\n\ndef Message processData(Message message) {\n    def body = message.getBody(java.lang.String)\n    def properties = message.getProperties()\n    \n    // Construct dynamic WHERE clause for Employee Central API\n    def whereClause = new StringBuilder()\n    \n    // Add territory filtering\n    if (properties.get('Territory') != null) {\n        whereClause.append(\"territory eq '\").append(properties.get('Territory')).append(\"'\")\n    }\n    \n    // Add employee class filtering\n    if (properties.get('EmployeeClass') != null) {\n        if (whereClause.length() > 0) whereClause.append(\" and \")\n        whereClause.append(\"employeeClass eq '\").append(properties.get('EmployeeClass')).append(\"'\")\n    }\n    \n    // Add delta date filtering if LastSuccessRunDate exists\n    if (properties.get('LastSuccessRunDate') != null) {\n        if (whereClause.length() > 0) whereClause.append(\" and \")\n        whereClause.append(\"lastModifiedDateTime gt datetime'\").append(properties.get('LastSuccessRunDate')).append(\"'\")\n    }\n    \n    // Add effective end date filtering\n    if (whereClause.length() > 0) whereClause.append(\" and \")\n    whereClause.append(\"(endDate eq null or endDate gt datetime'now()')\")\n    \n    message.setProperty('DynamicWhereClause', whereClause.toString())\n    return message\n}"
        },
        {
          "name": "TransformECToNAVEX.groovy",
          "type": "groovy",
          "script": "import com.sap.gateway.ip.core.customdev.util.Message\nimport groovy.xml.XmlSlurper\nimport groovy.xml.MarkupBuilder\n\ndef Message processData(Message message) {\n    def body = message.getBody(java.lang.String)\n    def xml = new XmlSlurper().parseText(body)\n    def properties = message.getProperties()\n    \n    def writer = new StringWriter()\n    def csv = new MarkupBuilder(writer)\n    \n    // Transform Employee Central data to NAVEX format\n    def transformedRecords = []\n    \n    xml.entry.each { employee ->\n        def record = [:]\n        \n        // Map core employee fields\n        record['GPID'] = employee.content.'m:properties'.'d:personIdExternal'.text()\n        record['First Name'] = employee.content.'m:properties'.'d:firstName'.text()\n        record['Last Name'] = employee.content.'m:properties'.'d:lastName'.text()\n        record['Email Address'] = employee.content.'m:properties'.'d:email'.text()\n        record['Position Title'] = employee.content.'m:properties'.'d:jobTitle'.text()\n        record['Country'] = employee.content.'m:properties'.'d:country'.text()\n        record['manager-id'] = employee.content.'m:properties'.'d:managerId'.text()\n        record['User ID'] = employee.content.'m:properties'.'d:userId'.text()\n        record['Original Hire Date'] = employee.content.'m:properties'.'d:originalStartDate'.text()\n        \n        // Resolve picklist values using cached mappings\n        record['emplStatus'] = resolvePicklistValue(employee.content.'m:properties'.'d:emplStatus'.text(), properties)\n        record['employee-class'] = resolvePicklistValue(employee.content.'m:properties'.'d:emplClass'.text(), properties)\n        record['pay-grade'] = resolvePicklistValue(employee.content.'m:properties'.'d:payGrade'.text(), properties)\n        \n        // Handle union fields\n        record['Is Union Employee'] = employee.content.'m:properties'.'d:isUnionEmployee'.text() ?: 'N'\n        record['Participating in Union'] = employee.content.'m:properties'.'d:unionParticipation'.text() ?: 'N'\n        \n        // Location and organizational data\n        record['location'] = employee.content.'m:properties'.'d:location'.text()\n        record['Region'] = employee.content.'m:properties'.'d:region'.text()\n        record['Sector'] = employee.content.'m:properties'.'d:businessUnit'.text()\n        \n        // Manager information\n        record['Manager name'] = employee.content.'m:properties'.'d:managerName'.text()\n        record['HRA Manager name'] = employee.content.'m:properties'.'d:hraManagerName'.text()\n        \n        // Termination data (if applicable)\n        record['Termination Date'] = employee.content.'m:properties'.'d:endDate'.text()\n        record['Termination Reason'] = resolvePicklistValue(employee.content.'m:properties'.'d:terminationReason'.text(), properties)\n        \n        // Employment relationship\n        record['Relationship Type'] = resolvePicklistValue(employee.content.'m:properties'.'d:emplRelationship'.text(), properties)\n        \n        transformedRecords.add(record)\n    }\n    \n    // Convert to CSV format for NAVEX\n    def csvOutput = new StringBuilder()\n    if (transformedRecords.size() > 0) {\n        // Header row\n        csvOutput.append(transformedRecords[0].keySet().join(','))\n        csvOutput.append('\\n')\n        \n        // Data rows\n        transformedRecords.each { record ->\n            csvOutput.append(record.values().collect { it ?: '' }.join(','))\n            csvOutput.append('\\n')\n        }\n    }\n    \n    message.setBody(csvOutput.toString())\n    message.setProperty('RecordCount', transformedRecords.size())\n    return message\n}\n\ndef resolvePicklistValue(picklistId, properties) {\n    if (!picklistId) return ''\n    return properties.get('Picklist_' + picklistId) ?: picklistId\n}"
        },
        {
          "name": "MapErrorMessages.groovy",
          "type": "groovy",
          "script": "import com.sap.gateway.ip.core.customdev.util.Message\nimport groovy.xml.MarkupBuilder\n\ndef Message processData(Message message) {\n    def body = message.getBody(java.lang.String)\n    def properties = message.getProperties()\n    \n    def writer = new StringWriter()\n    def xml = new MarkupBuilder(writer)\n    \n    // Transform error records into standardized format\n    xml.ErrorReport {\n        Record {\n            Elements {\n                GPID(properties.get('ErrorGPID') ?: 'UNKNOWN')\n                Severity(properties.get('ErrorSeverity') ?: 'Hard')\n                'Error text'(properties.get('ErrorMessage') ?: 'Processing error occurred')\n                Timestamp(new Date().format('yyyy-MM-dd HH:mm:ss'))\n                ProcessStep(properties.get('ErrorStep') ?: 'Unknown')\n            }\n        }\n    }\n    \n    message.setBody(writer.toString())\n    return message\n}"
        },
        {
          "name": "GenerateControlReport.groovy",
          "type": "groovy",
          "script": "import com.sap.gateway.ip.core.customdev.util.Message\nimport groovy.xml.MarkupBuilder\n\ndef Message processData(Message message) {\n    def body = message.getBody(java.lang.String)\n    def properties = message.getProperties()\n    \n    def writer = new StringWriter()\n    def xml = new MarkupBuilder(writer)\n    \n    // Generate comprehensive control report\n    xml.ControlReport {\n        Record {\n            Elements {\n                text(\"EC372 Employee Central to NAVEX Integration Control Report\\n\" +\n                     \"Execution Date: ${new Date().format('yyyy-MM-dd HH:mm:ss')}\\n\" +\n                     \"Processing Mode: ${properties.get('ProcessingMode') ?: 'Full'}\\n\" +\n                     \"Records Processed: ${properties.get('RecordCount') ?: '0'}\\n\" +\n                     \"Records with Errors: ${properties.get('ErrorCount') ?: '0'}\\n\" +\n                     \"Files Distributed: ${properties.get('FilesDistributed') ?: '0'}\\n\" +\n                     \"NAVEX Distribution: ${properties.get('NavexDistribution') ?: 'Success'}\\n\" +\n                     \"PepsiCo Archive: ${properties.get('PepsiArchive') ?: 'Success'}\\n\" +\n                     \"Last Success Run Date: ${properties.get('LastSuccessRunDate') ?: 'N/A'}\")\n            }\n        }\n    }\n    \n    message.setBody(writer.toString())\n    return message\n}"
        }
      ],
      "sequence_flows": [
        {
          "id": "SequenceFlow_Start",
          "source": "delta_decision_1",
          "target": "ec_extract_1",
          "is_immediate": true,
          "xml_content": "<bpmn2:sequenceFlow id=\"SequenceFlow_Start\" sourceRef=\"delta_decision_1\" targetRef=\"ec_extract_1\" isImmediate=\"true\"/>"
        },
        {
          "id": "SequenceFlow_1",
          "source": "ec_extract_1",
          "target": "file_prep_1",
          "is_immediate": true,
          "xml_content": "<bpmn2:sequenceFlow id=\"SequenceFlow_1\" sourceRef=\"ec_extract_1\" targetRef=\"file_prep_1\" isImmediate=\"true\"/>"
        },
        {
          "id": "SequenceFlow_2",
          "source": "file_prep_1",
          "target": "update_lsrd_1",
          "is_immediate": true,
          "xml_content": "<bpmn2:sequenceFlow id=\"SequenceFlow_2\" sourceRef=\"file_prep_1\" targetRef=\"update_lsrd_1\" isImmediate=\"true\"/>"
        },
        {
          "id": "SequenceFlow_3",
          "source": "update_lsrd_1",
          "target": "where_clause_1",
          "is_immediate": true,
          "xml_content": "<bpmn2:sequenceFlow id=\"SequenceFlow_3\" sourceRef=\"update_lsrd_1\" targetRef=\"where_clause_1\" isImmediate=\"true\"/>"
        },
        {
          "id": "SequenceFlow_4",
          "source": "where_clause_1",
          "target": "control_report_1",
          "is_immediate": true,
          "xml_content": "<bpmn2:sequenceFlow id=\"SequenceFlow_4\" sourceRef=\"where_clause_1\" targetRef=\"control_report_1\" isImmediate=\"true\"/>"
        },
        {
          "id": "SequenceFlow_5",
          "source": "control_report_1",
          "target": "picklist_query_1",
          "is_immediate": true,
          "xml_content": "<bpmn2:sequenceFlow id=\"SequenceFlow_5\" sourceRef=\"control_report_1\" targetRef=\"picklist_query_1\" isImmediate=\"true\"/>"
        },
        {
          "id": "SequenceFlow_6",
          "source": "picklist_query_1",
          "target": "sftp_navex_1",
          "is_immediate": true,
          "xml_content": "<bpmn2:sequenceFlow id=\"SequenceFlow_6\" sourceRef=\"picklist_query_1\" targetRef=\"sftp_navex_1\" isImmediate=\"true\"/>"
        },
        {
          "id": "SequenceFlow_7",
          "source": "sftp_navex_1",
          "target": "sftp_pepsi_1",
          "is_immediate": true,
          "xml_content": "<bpmn2:sequenceFlow id=\"SequenceFlow_7\" sourceRef=\"sftp_navex_1\" targetRef=\"sftp_pepsi_1\" isImmediate=\"true\"/>"
        },
        {
          "id": "SequenceFlow_8",
          "source": "sftp_pepsi_1",
          "target": "email_notify_1",
          "is_immediate": true,
          "xml_content": "<bpmn2:sequenceFlow id=\"SequenceFlow_8\" sourceRef=\"sftp_pepsi_1\" targetRef=\"email_notify_1\" isImmediate=\"true\"/>"
        },
        {
          "id": "SequenceFlow_End",
          "source": "email_notify_1",
          "target": "transform_main_1",
          "is_immediate": true,
          "xml_content": "<bpmn2:sequenceFlow id=\"SequenceFlow_End\" sourceRef=\"email_notify_1\" targetRef=\"transform_main_1\" isImmediate=\"true\"/>"
        }
      ]
    }
  ]
}