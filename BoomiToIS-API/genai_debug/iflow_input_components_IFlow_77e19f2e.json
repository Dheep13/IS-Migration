{
  "process_name": "SAP SuccessFactors to SFTP Integration",
  "description": "This integration extracts employee contact data from SAP SuccessFactors, transforms it into the required format, and delivers it to a designated SFTP server with comprehensive error handling.",
  "endpoints": [
    {
      "method": "GET",
      "path": "/SuccessFactors/ContactData",
      "purpose": "Retrieves contact information from SuccessFactors and transfers it to SFTP",
      "components": [
        {
          "type": "odata",
          "name": "Get_SuccessFactors_Contact_Data",
          "id": "odata_successfactors_1",
          "config": {
            "address": "${property.SuccessFactors_API_URL}",
            "resource_path": "ContactData",
            "operation": "Query(GET)",
            "query_options": ""
          }
        },
        {
          "type": "enricher",
          "name": "Log_Success_Message",
          "id": "log_success_1",
          "config": {
            "content": "File successfully uploaded to SFTP server"
          }
        },
        {
          "type": "groovy_script",
          "name": "Validate_Contact_Data",
          "id": "validate_data_1",
          "config": {
            "script": "ValidateContactData.groovy"
          }
        },
        {
          "type": "request_reply",
          "name": "SFTP_File_Upload",
          "id": "sftp_upload_1",
          "config": {
            "endpoint_path": "${property.TARGET_DIRECTORY}"
          }
        },
        {
          "type": "groovy_script",
          "name": "Transform_Canonical_To_Kafka_Avro",
          "id": "transform_data_1",
          "config": {
            "script": "TransformCanonicalToKafkaAvro.groovy"
          }
        }
      ],
      "error_handling": {
        "exception_subprocess": [
          {
            "type": "enricher",
            "name": "Prepare_Error_Message",
            "id": "error_message_1",
            "trigger": "any_error",
            "config": {
              "content": "Error occurred during SuccessFactors to SFTP integration: ${property.ErrorMessage}"
            }
          },
          {
            "type": "groovy_script",
            "name": "Format_Error_Details",
            "id": "format_error_1",
            "trigger": "any_error",
            "config": {
              "script": "FormatErrorDetails.groovy"
            }
          },
          {
            "type": "request_reply",
            "name": "Send_Error_Notification",
            "id": "send_notification_1",
            "trigger": "any_error",
            "config": {
              "endpoint_path": "/notifications/email"
            }
          },
          {
            "type": "enricher",
            "name": "Log_Error_Details",
            "id": "log_error_1",
            "trigger": "any_error",
            "config": {
              "content": "Detailed error information: ${property.ErrorDetails}"
            }
          }
        ]
      },
      "branching": {
        "type": "exclusive",
        "branches": [
          {
            "condition": "${property.DataValid} == true",
            "components": [
              "transform_data_1",
              "sftp_upload_1",
              "log_success_1"
            ],
            "sequence": [
              "transform_data_1",
              "sftp_upload_1",
              "log_success_1"
            ]
          },
          {
            "condition": "${property.DataValid} == false",
            "components": [
              "error_message_1"
            ],
            "sequence": [
              "error_message_1"
            ]
          }
        ]
      },
      "sequence": [
        "odata_successfactors_1",
        "validate_data_1",
        "transform_data_1",
        "sftp_upload_1",
        "log_success_1"
      ],
      "transformations": [
        {
          "name": "ValidateContactData.groovy",
          "type": "groovy",
          "script": "import com.sap.gateway.ip.core.customdev.util.Message;\n\ndef Message processData(Message message) {\n    def body = message.getBody(java.lang.String);\n    def properties = message.getProperties();\n    \n    // Validate the data\n    def isValid = true;\n    def errorMessage = \"\";\n    \n    try {\n        def jsonData = new groovy.json.JsonSlurper().parseText(body);\n        \n        // Check if required fields exist\n        if (!jsonData.contactID) {\n            isValid = false;\n            errorMessage = \"Missing required field: contactID\";\n        }\n        \n        // Add more validation as needed\n        \n    } catch (Exception e) {\n        isValid = false;\n        errorMessage = \"Invalid JSON format: \" + e.getMessage();\n    }\n    \n    // Set properties for branching\n    properties.put(\"DataValid\", isValid);\n    if (!isValid) {\n        properties.put(\"ErrorMessage\", errorMessage);\n    }\n    \n    return message;\n}"
        },
        {
          "name": "TransformCanonicalToKafkaAvro.groovy",
          "type": "groovy",
          "script": "import com.sap.gateway.ip.core.customdev.util.Message;\nimport groovy.json.*;\n\ndef Message processData(Message message) {\n    def body = message.getBody(java.lang.String);\n    def jsonData = new JsonSlurper().parseText(body);\n    def result = [:];\n    \n    // Create the target structure\n    result.batchProcessingDirectives = [\n        accountID: [\n            username: jsonData.username // Source field 9\n        ],\n        batchProcessingOption: [\n            [\n                name: jsonData.batchProcessingOptionName // Source field 118\n            ]\n        ]\n    ];\n    \n    // Create contact list structure\n    result.batchContactList = [\n        [\n            contact: [\n                [\n                    contactID: jsonData.contactID, // Source field 91\n                    contactPointList: [\n                        [\n                            contactPoint: [\n                                [\n                                    type: jsonData.contactPointType // Source field 111\n                                ]\n                            ]\n                        ]\n                    ]\n                ]\n            ]\n        ]\n    ];\n    \n    // Convert result back to JSON string\n    message.setBody(new JsonBuilder(result).toPrettyString());\n    return message;\n}"
        },
        {
          "name": "FormatErrorDetails.groovy",
          "type": "groovy",
          "script": "import com.sap.gateway.ip.core.customdev.util.Message;\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\n\ndef Message processData(Message message) {\n    def properties = message.getProperties();\n    def errorMessage = properties.get(\"ErrorMessage\") ?: \"Unknown error\";\n    def errorDetails = [:];\n    \n    // Get exception details if available\n    def exception = properties.get(\"CamelExceptionCaught\");\n    def stackTrace = \"\";\n    if (exception) {\n        def sw = new StringWriter();\n        exception.printStackTrace(new PrintWriter(sw));\n        stackTrace = sw.toString();\n    }\n    \n    // Format error details\n    errorDetails.timestamp = LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME);\n    errorDetails.message = errorMessage;\n    errorDetails.process = \"SAP SuccessFactors to SFTP Integration\";\n    errorDetails.component = properties.get(\"CamelFailureRouteId\") ?: \"Unknown component\";\n    errorDetails.stackTrace = stackTrace;\n    \n    // Convert to JSON and store in property\n    properties.put(\"ErrorDetails\", new groovy.json.JsonBuilder(errorDetails).toString());\n    \n    return message;\n}"
        }
      ],
      "sequence_flows": [
        {
          "id": "SequenceFlow_Start",
          "source": "odata_successfactors_1",
          "target": "log_success_1",
          "is_immediate": true,
          "xml_content": "<bpmn2:sequenceFlow id=\"SequenceFlow_Start\" sourceRef=\"odata_successfactors_1\" targetRef=\"log_success_1\" isImmediate=\"true\"/>"
        },
        {
          "id": "SequenceFlow_1",
          "source": "log_success_1",
          "target": "validate_data_1",
          "is_immediate": true,
          "xml_content": "<bpmn2:sequenceFlow id=\"SequenceFlow_1\" sourceRef=\"log_success_1\" targetRef=\"validate_data_1\" isImmediate=\"true\"/>"
        },
        {
          "id": "SequenceFlow_2",
          "source": "validate_data_1",
          "target": "sftp_upload_1",
          "is_immediate": true,
          "xml_content": "<bpmn2:sequenceFlow id=\"SequenceFlow_2\" sourceRef=\"validate_data_1\" targetRef=\"sftp_upload_1\" isImmediate=\"true\"/>"
        },
        {
          "id": "SequenceFlow_End",
          "source": "sftp_upload_1",
          "target": "transform_data_1",
          "is_immediate": true,
          "xml_content": "<bpmn2:sequenceFlow id=\"SequenceFlow_End\" sourceRef=\"sftp_upload_1\" targetRef=\"transform_data_1\" isImmediate=\"true\"/>"
        }
      ]
    }
  ]
}