{
  "process_name": "Create Salesforce Opportunities from Stripe Subscriptions",
  "description": "This integration creates Salesforce Opportunities based on Stripe Subscription data. It listens for Stripe subscription events, processes the subscription data, and creates corresponding opportunity records in Salesforce.",
  "endpoints": [
    {
      "method": "POST",
      "path": "/webhook/stripe/subscription",
      "purpose": "Receives subscription events from Stripe and creates Salesforce Opportunities",
      "components": [
        {
          "type": "enricher",
          "name": "Set_Dynamic_Properties",
          "id": "enricher_1",
          "config": {
            "content": "Set headers for Salesforce connection and processing flags"
          }
        },
        {
          "type": "enricher",
          "name": "Process_Data",
          "id": "enricher_2",
          "config": {
            "content": "Additional processing logic and data validation"
          }
        },
        {
          "type": "request_reply",
          "name": "Create_Salesforce_Opportunity",
          "id": "request_reply_1",
          "config": {
            "endpoint_path": "/services/data/v52.0/sobjects/Opportunity"
          }
        },
        {
          "type": "groovy_script",
          "name": "Transform_Stripe_To_Salesforce",
          "id": "transform_1",
          "config": {
            "script": "TransformStripeToSalesforce.groovy"
          }
        }
      ],
      "error_handling": {
        "exception_subprocess": [
          {
            "type": "enricher",
            "name": "Log_Error_Details",
            "id": "error_log_1",
            "trigger": "any_error",
            "config": {
              "content": "Format error information for logging"
            }
          },
          {
            "type": "request_reply",
            "name": "Send_Error_Notification",
            "id": "error_notification_1",
            "trigger": "any_error",
            "config": {
              "endpoint_path": "/mail/send"
            }
          }
        ]
      },
      "branching": {
        "type": "exclusive",
        "branches": [
          {
            "condition": "Default path",
            "components": [
              "enricher_1",
              "transform_1",
              "enricher_2",
              "request_reply_1"
            ],
            "sequence": [
              "enricher_1",
              "transform_1",
              "enricher_2",
              "request_reply_1"
            ]
          }
        ]
      },
      "sequence": [
        "enricher_1",
        "transform_1",
        "enricher_2",
        "request_reply_1"
      ],
      "transformations": [
        {
          "name": "TransformStripeToSalesforce.groovy",
          "type": "groovy",
          "script": "import groovy.json.*\n\ndef inputBody = message.getBody(String.class)\ndef jsonSlurper = new JsonSlurper()\ndef stripeEvent = jsonSlurper.parseText(inputBody)\n\n// Extract subscription data from Stripe event\ndef subscription = stripeEvent.data.object\n\n// Create Salesforce Opportunity object\ndef opportunity = [\n    'Name': 'Subscription: ' + subscription.id,\n    'StageName': subscription.status == 'active' ? 'Closed Won' : 'Prospecting',\n    'CloseDate': new Date().format('yyyy-MM-dd'),\n    'Amount': subscription.plan.amount / 100, // Convert cents to dollars\n    'CurrencyIsoCode': subscription.plan.currency.toUpperCase(),\n    'Stripe_Subscription_ID__c': subscription.id,\n    'Description': 'Created from Stripe subscription event'\n]\n\n// If customer email is available, add it\nif (subscription.customer && subscription.customer.email) {\n    opportunity.put('Customer_Email__c', subscription.customer.email)\n}\n\n// Convert to JSON\ndef jsonBuilder = new JsonBuilder(opportunity)\nreturn jsonBuilder.toString()"
        }
      ],
      "sequence_flows": [
        {
          "id": "SequenceFlow_Start",
          "source": "enricher_1",
          "target": "enricher_2",
          "is_immediate": true,
          "xml_content": "<bpmn2:sequenceFlow id=\"SequenceFlow_Start\" sourceRef=\"enricher_1\" targetRef=\"enricher_2\" isImmediate=\"true\"/>"
        },
        {
          "id": "SequenceFlow_1",
          "source": "enricher_2",
          "target": "request_reply_1",
          "is_immediate": true,
          "xml_content": "<bpmn2:sequenceFlow id=\"SequenceFlow_1\" sourceRef=\"enricher_2\" targetRef=\"request_reply_1\" isImmediate=\"true\"/>"
        },
        {
          "id": "SequenceFlow_End",
          "source": "request_reply_1",
          "target": "transform_1",
          "is_immediate": true,
          "xml_content": "<bpmn2:sequenceFlow id=\"SequenceFlow_End\" sourceRef=\"request_reply_1\" targetRef=\"transform_1\" isImmediate=\"true\"/>"
        }
      ]
    }
  ]
}