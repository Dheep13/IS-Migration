{
  "process_name": "Create Salesforce Opportunities from Stripe Subscriptions",
  "description": "This integration creates Salesforce Opportunities based on Stripe Subscription data. It listens for Stripe webhook events, processes the subscription data, and creates corresponding opportunity records in Salesforce.",
  "endpoints": [
    {
      "method": "POST",
      "path": "/stripe-webhook",
      "purpose": "Receives subscription events from Stripe and creates Salesforce opportunities",
      "components": [
        {
          "type": "enricher",
          "name": "Set_Dynamic_Properties",
          "id": "enricher_1",
          "config": {
            "content": "{\n  \"properties\": {\n    \"stripeEventType\": \"${header.stripe-signature}\",\n    \"subscriptionId\": \"${body.data.object.id}\",\n    \"customerId\": \"${body.data.object.customer}\",\n    \"planId\": \"${body.data.object.plan.id}\",\n    \"amount\": \"${body.data.object.plan.amount}\",\n    \"currency\": \"${body.data.object.plan.currency}\",\n    \"status\": \"${body.data.object.status}\"\n  }\n}"
          }
        },
        {
          "type": "request_reply",
          "name": "Create_Salesforce_Opportunity",
          "id": "request_reply_1",
          "receiver_adapter": {
            "type": "odata_adapter",
            "operation": "POST",
            "endpoint": "/Opportunity",
            "connection": "odata_connection"
          },
          "config": {
            "endpoint_path": "/Opportunity",
            "method": "POST",
            "address": "${property.salesforce_url}",
            "resource_path": "Opportunity"
          }
        },
        {
          "type": "groovy_script",
          "name": "Transform_Stripe_To_Salesforce",
          "id": "transform_1",
          "config": {
            "script": "import groovy.json.*\n\ndef jsonSlurper = new JsonSlurper()\ndef body = jsonSlurper.parseText(message.getBody(String.class))\n\n// Extract subscription data\ndef subscription = body.data.object\ndef amount = subscription.plan.amount / 100 // Convert cents to dollars\ndef currency = subscription.plan.currency.toUpperCase()\ndef status = subscription.status\n\n// Map subscription status to opportunity stage\ndef stageMap = [\n    'active': 'Closed Won',\n    'trialing': 'Proposal/Price Quote',\n    'past_due': 'Negotiation/Review',\n    'canceled': 'Closed Lost',\n    'unpaid': 'Needs Analysis'\n]\n\ndef stageName = stageMap[status] ?: 'Prospecting'\n\n// Create Salesforce opportunity object\ndef opportunity = [\n    'Name': \"Stripe Subscription: ${subscription.id}\",\n    'StageName': stageName,\n    'CloseDate': new Date().format('yyyy-MM-dd'),\n    'Amount': amount,\n    'CurrencyIsoCode': currency,\n    'Type': 'New Business',\n    'Description': \"Created from Stripe subscription ${subscription.id}\",\n    'Stripe_Subscription_Id__c': subscription.id,\n    'Stripe_Customer_Id__c': subscription.customer\n]\n\n// Convert to JSON and set as message body\nmessage.setBody(new JsonBuilder(opportunity).toString())\nreturn message"
          }
        }
      ],
      "error_handling": {
        "exception_subprocess": [
          {
            "type": "enricher",
            "name": "Set_Error_Message",
            "id": "error_enricher_1",
            "trigger": "any_error",
            "config": {
              "content": "{\n  \"error\": {\n    \"message\": \"${exception.message}\",\n    \"type\": \"${exception.class}\",\n    \"details\": \"Error occurred while processing Stripe subscription\"\n  }\n}"
            }
          },
          {
            "type": "groovy_script",
            "name": "Log_Error_Details",
            "id": "error_script_1",
            "trigger": "any_error",
            "config": {
              "script": "import groovy.json.*\n\ndef errorDetails = [\n    'timestamp': new Date().format(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"),\n    'process': 'Create_Salesforce_Opportunities_from_Stripe',\n    'error_message': exception.getMessage(),\n    'error_type': exception.getClass().getName(),\n    'stack_trace': exception.getStackTrace().toString()\n]\n\nprintln \"ERROR: \" + new JsonBuilder(errorDetails).toString()\nreturn message"
            }
          }
        ]
      },
      "branching": {
        "type": "exclusive",
        "branches": [
          {
            "condition": "${property.stripeEventType} == 'subscription.created' || ${property.stripeEventType} == 'subscription.updated'",
            "components": [
              "enricher_1",
              "transform_1",
              "odata_1"
            ],
            "sequence": [
              "enricher_1",
              "transform_1",
              "odata_1"
            ]
          }
        ]
      },
      "sequence": [
        "enricher_1",
        "transform_1",
        "odata_1"
      ],
      "transformations": [
        {
          "name": "TransformStripeToSalesforce.groovy",
          "type": "groovy",
          "script": "import groovy.json.*\n\ndef jsonSlurper = new JsonSlurper()\ndef body = jsonSlurper.parseText(message.getBody(String.class))\n\n// Extract subscription data\ndef subscription = body.data.object\ndef amount = subscription.plan.amount / 100 // Convert cents to dollars\ndef currency = subscription.plan.currency.toUpperCase()\ndef status = subscription.status\n\n// Map subscription status to opportunity stage\ndef stageMap = [\n    'active': 'Closed Won',\n    'trialing': 'Proposal/Price Quote',\n    'past_due': 'Negotiation/Review',\n    'canceled': 'Closed Lost',\n    'unpaid': 'Needs Analysis'\n]\n\ndef stageName = stageMap[status] ?: 'Prospecting'\n\n// Create Salesforce opportunity object\ndef opportunity = [\n    'Name': \"Stripe Subscription: ${subscription.id}\",\n    'StageName': stageName,\n    'CloseDate': new Date().format('yyyy-MM-dd'),\n    'Amount': amount,\n    'CurrencyIsoCode': currency,\n    'Type': 'New Business',\n    'Description': \"Created from Stripe subscription ${subscription.id}\",\n    'Stripe_Subscription_Id__c': subscription.id,\n    'Stripe_Customer_Id__c': subscription.customer\n]\n\n// Convert to JSON and set as message body\nmessage.setBody(new JsonBuilder(opportunity).toString())\nreturn message"
        }
      ],
      "sequence_flows": [
        {
          "id": "SequenceFlow_Start",
          "source": "enricher_1",
          "target": "odata_1",
          "is_immediate": true,
          "xml_content": "<bpmn2:sequenceFlow id=\"SequenceFlow_Start\" sourceRef=\"enricher_1\" targetRef=\"odata_1\" isImmediate=\"true\"/>"
        },
        {
          "id": "SequenceFlow_End",
          "source": "odata_1",
          "target": "transform_1",
          "is_immediate": true,
          "xml_content": "<bpmn2:sequenceFlow id=\"SequenceFlow_End\" sourceRef=\"odata_1\" targetRef=\"transform_1\" isImmediate=\"true\"/>"
        }
      ]
    }
  ]
}