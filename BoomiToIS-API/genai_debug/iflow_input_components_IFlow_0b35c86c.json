{
  "process_name": "Stripe to Salesforce Opportunity Integration",
  "description": "This integration creates Salesforce Opportunities automatically when Stripe Subscriptions are completed. It listens for Stripe webhook events, transforms the subscription data into Salesforce Opportunity format, and creates new Opportunity records in Salesforce.",
  "endpoints": [
    {
      "method": "POST",
      "path": "/webhook/stripe/subscription",
      "purpose": "Receives webhook notifications from Stripe when subscription events occur and creates corresponding Salesforce Opportunities",
      "components": [
        {
          "type": "enricher",
          "name": "Set_Stripe_Properties",
          "id": "enricher_stripe_properties",
          "config": {
            "content": "stripe.event.type = ${body.type};\nstripe.subscription.id = ${body.data.object.id};\nstripe.customer.id = ${body.data.object.customer};"
          }
        },
        {
          "type": "json_to_xml_converter",
          "name": "Convert_JSON_to_XML",
          "id": "json_to_xml_converter_1",
          "config": {}
        },
        {
          "type": "enricher",
          "name": "Prepare_Salesforce_Request",
          "id": "enricher_salesforce_request",
          "config": {
            "content": "Content-Type = application/xml;\nAuthorization = Bearer ${property.salesforce.token};"
          }
        },
        {
          "type": "groovy_script",
          "name": "Verify_Stripe_Signature",
          "id": "script_verify_signature",
          "config": {
            "script": "VerifyStripeSignature.groovy"
          }
        },
        {
          "type": "request_reply",
          "name": "Create_Salesforce_Opportunity",
          "id": "request_reply_salesforce",
          "config": {
            "endpoint_path": "/services/data/v55.0/sobjects/Opportunity",
            "method": "POST"
          }
        },
        {
          "type": "groovy_script",
          "name": "Transform_Stripe_to_Salesforce",
          "id": "script_transform_data",
          "config": {
            "script": "TransformStripeToSalesforce.groovy"
          }
        }
      ],
      "sequence": [
        "enricher_stripe_properties",
        "script_verify_signature",
        "json_to_xml_converter_1",
        "script_transform_data",
        "enricher_salesforce_request",
        "request_reply_salesforce"
      ],
      "transformations": [
        {
          "name": "VerifyStripeSignature.groovy",
          "type": "groovy",
          "script": "import com.sap.gateway.ip.core.customdev.util.Message;\nimport javax.crypto.Mac;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.security.InvalidKeyException;\n\ndef Message processData(Message message) {\n    def body = message.getBody(String);\n    def properties = message.getProperties();\n    def headers = message.getHeaders();\n    \n    // Get Stripe signature from headers\n    def stripeSignature = headers.get(\"Stripe-Signature\");\n    if (stripeSignature == null) {\n        throw new RuntimeException(\"Missing Stripe-Signature header\");\n    }\n    \n    // Get webhook secret from properties\n    def webhookSecret = properties.get(\"stripe.webhook.secret\");\n    if (webhookSecret == null) {\n        throw new RuntimeException(\"Missing stripe.webhook.secret property\");\n    }\n    \n    // Verify signature (simplified implementation)\n    // In a real implementation, you would parse the signature header and verify the timestamp and signatures\n    // This is a placeholder for the actual verification logic\n    \n    // If verification passes, continue processing\n    // If verification fails, throw an exception\n    \n    return message;\n}"
        },
        {
          "name": "TransformStripeToSalesforce.groovy",
          "type": "groovy",
          "script": "import com.sap.gateway.ip.core.customdev.util.Message;\nimport groovy.xml.*;\nimport java.text.SimpleDateFormat;\n\ndef Message processData(Message message) {\n    def body = message.getBody(java.lang.Object);\n    def properties = message.getProperties();\n    \n    // Extract subscription data from the Stripe event\n    def subscription = body.data.object;\n    \n    // Create Salesforce Opportunity XML\n    def writer = new StringWriter();\n    def builder = new MarkupBuilder(writer);\n    \n    builder.Opportunity {\n        Name(subscription.name ?: \"Subscription \" + subscription.id)\n        Description(subscription.description ?: \"Stripe Subscription: \" + subscription.id)\n        \n        // Convert Unix timestamp to date format\n        def closeDate = new Date(subscription.current_period_end * 1000);\n        def dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n        CloseDate(dateFormat.format(closeDate))\n        \n        // Set default values for required fields\n        StageName(\"Closed Won\")\n        \n        // Set amount if available\n        if (subscription.plan?.amount) {\n            Amount(subscription.plan.amount / 100) // Convert cents to dollars\n        }\n    }\n    \n    // Set the transformed XML as the message body\n    message.setBody(writer.toString());\n    \n    return message;\n}"
        }
      ],
      "sequence_flows": [
        {
          "id": "SequenceFlow_Start",
          "source": "enricher_stripe_properties",
          "target": "json_to_xml_converter_1",
          "is_immediate": true,
          "xml_content": "<bpmn2:sequenceFlow id=\"SequenceFlow_Start\" sourceRef=\"enricher_stripe_properties\" targetRef=\"json_to_xml_converter_1\" isImmediate=\"true\"/>"
        },
        {
          "id": "SequenceFlow_1",
          "source": "json_to_xml_converter_1",
          "target": "enricher_salesforce_request",
          "is_immediate": true,
          "xml_content": "<bpmn2:sequenceFlow id=\"SequenceFlow_1\" sourceRef=\"json_to_xml_converter_1\" targetRef=\"enricher_salesforce_request\" isImmediate=\"true\"/>"
        },
        {
          "id": "SequenceFlow_2",
          "source": "enricher_salesforce_request",
          "target": "script_verify_signature",
          "is_immediate": true,
          "xml_content": "<bpmn2:sequenceFlow id=\"SequenceFlow_2\" sourceRef=\"enricher_salesforce_request\" targetRef=\"script_verify_signature\" isImmediate=\"true\"/>"
        },
        {
          "id": "SequenceFlow_3",
          "source": "script_verify_signature",
          "target": "request_reply_salesforce",
          "is_immediate": true,
          "xml_content": "<bpmn2:sequenceFlow id=\"SequenceFlow_3\" sourceRef=\"script_verify_signature\" targetRef=\"request_reply_salesforce\" isImmediate=\"true\"/>"
        },
        {
          "id": "SequenceFlow_End",
          "source": "request_reply_salesforce",
          "target": "script_transform_data",
          "is_immediate": true,
          "xml_content": "<bpmn2:sequenceFlow id=\"SequenceFlow_End\" sourceRef=\"request_reply_salesforce\" targetRef=\"script_transform_data\" isImmediate=\"true\"/>"
        }
      ]
    }
  ]
}