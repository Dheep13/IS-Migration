{
  "process_name": "Stripe to Salesforce Opportunity Integration",
  "description": "This integration creates Salesforce Opportunities automatically when Stripe Subscriptions are completed. It listens for Stripe subscription events via a webhook, transforms the subscription data, and creates corresponding opportunity records in Salesforce.",
  "endpoints": [
    {
      "method": "POST",
      "path": "/webhook/stripe/subscription",
      "purpose": "Receives webhook notifications from Stripe when subscription events occur and creates corresponding Salesforce Opportunities",
      "components": [
        {
          "type": "enricher",
          "name": "Set_Stripe_Properties",
          "id": "enricher_stripe_properties",
          "config": {
            "content": "Set dynamic properties based on the incoming Stripe webhook data including event type, subscription ID, and customer ID"
          }
        },
        {
          "type": "json_to_xml_converter",
          "name": "Convert_JSON_to_XML",
          "id": "json_to_xml_converter_1",
          "config": {}
        },
        {
          "type": "groovy_script",
          "name": "Validate_Stripe_Signature",
          "id": "script_validate_signature",
          "config": {
            "script": "ValidateStripeSignature.groovy"
          }
        },
        {
          "type": "request_reply",
          "name": "Create_Salesforce_Opportunity",
          "id": "request_reply_salesforce",
          "config": {
            "endpoint_path": "/services/data/v56.0/sobjects/Opportunity",
            "address": "https://{{SF_INSTANCE_URL}}"
          }
        },
        {
          "type": "groovy_script",
          "name": "Transform_Subscription_to_Opportunity",
          "id": "script_transform_data",
          "config": {
            "script": "TransformSubscriptionToOpportunity.groovy"
          }
        },
        {
          "type": "enricher",
          "name": "Format_Response",
          "id": "enricher_format_response",
          "config": {
            "content": "Format the response from Salesforce to return appropriate status codes and messages"
          }
        }
      ],
      "sequence": [
        "enricher_stripe_properties",
        "script_validate_signature",
        "json_to_xml_converter_1",
        "script_transform_data",
        "request_reply_salesforce",
        "enricher_format_response"
      ],
      "transformations": [
        {
          "name": "ValidateStripeSignature.groovy",
          "type": "groovy",
          "script": "import javax.crypto.Mac;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.security.InvalidKeyException;\n\ndef message = message.getBody(String.class);\ndef signature = message.getHeaders().get(\"Stripe-Signature\");\ndef secret = properties.get(\"STRIPE_WEBHOOK_SECRET\");\n\nif (signature == null || signature.isEmpty()) {\n    throw new RuntimeException(\"Missing Stripe-Signature header\");\n}\n\n// Parse the signature header\ndef timestamp = \"\";\ndef sigParts = signature.split(\",\");\nfor (String part : sigParts) {\n    if (part.startsWith(\"t=\")) {\n        timestamp = part.substring(2);\n    }\n}\n\nif (timestamp.isEmpty()) {\n    throw new RuntimeException(\"Unable to extract timestamp from Stripe signature\");\n}\n\n// Create the signed payload\ndef signedPayload = timestamp + \".\" + message;\n\n// Compute the expected signature\ndef algorithm = \"HmacSHA256\";\ntry {\n    Mac mac = Mac.getInstance(algorithm);\n    SecretKeySpec secretKeySpec = new SecretKeySpec(secret.getBytes(), algorithm);\n    mac.init(secretKeySpec);\n    byte[] digest = mac.doFinal(signedPayload.getBytes());\n    \n    // Convert to hex\n    StringBuilder sb = new StringBuilder();\n    for (byte b : digest) {\n        sb.append(String.format(\"%02x\", b));\n    }\n    String computedSignature = sb.toString();\n    \n    // Check if the signature is valid\n    boolean isValid = false;\n    for (String part : sigParts) {\n        if (part.startsWith(\"v1=\")) {\n            String providedSignature = part.substring(3);\n            if (computedSignature.equals(providedSignature)) {\n                isValid = true;\n                break;\n            }\n        }\n    }\n    \n    if (!isValid) {\n        throw new RuntimeException(\"Stripe signature verification failed\");\n    }\n    \n    // If we get here, the signature is valid\n    return message;\n    \n} catch (InvalidKeyException e) {\n    throw new RuntimeException(\"Invalid key exception: \" + e.getMessage());\n} catch (Exception e) {\n    throw new RuntimeException(\"Error validating Stripe signature: \" + e.getMessage());\n}"
        },
        {
          "name": "TransformSubscriptionToOpportunity.groovy",
          "type": "groovy",
          "script": "import groovy.json.*\nimport groovy.xml.*\n\n// Parse the incoming JSON\ndef jsonSlurper = new JsonSlurper()\ndef payload = jsonSlurper.parseText(message.getBody(String.class))\n\n// Extract subscription data\ndef event = payload\ndef subscription = event.data.object\ndef customer = subscription.customer\ndef plan = subscription.plan\n\n// Format dates\ndef closeDate = new Date(subscription.current_period_end * 1000).format(\"yyyy-MM-dd\")\n\n// Create Salesforce Opportunity XML\ndef writer = new StringWriter()\ndef builder = new MarkupBuilder(writer)\n\nbuilder.Opportunity {\n    Name(\"${plan.name} - ${customer}\")\n    Description(\"Stripe Subscription: ${subscription.id}\\nPlan: ${plan.name}\\nCustomer: ${customer}\")\n    CloseDate(closeDate)\n    StageName(\"Closed Won\")\n    Amount(subscription.plan.amount / 100) // Convert cents to dollars\n    Type(\"New Business\")\n    LeadSource(\"Stripe\")\n}\n\n// Set the output message\nmessage.setBody(writer.toString())\n\n// Set headers for Salesforce request\nmessage.setHeader(\"Content-Type\", \"application/xml\")\nmessage.setHeader(\"Authorization\", \"Bearer ${properties.get('SF_ACCESS_TOKEN')}\")\n\nreturn message"
        }
      ],
      "sequence_flows": [
        {
          "id": "SequenceFlow_Start",
          "source": "enricher_stripe_properties",
          "target": "json_to_xml_converter_1",
          "is_immediate": true,
          "xml_content": "<bpmn2:sequenceFlow id=\"SequenceFlow_Start\" sourceRef=\"enricher_stripe_properties\" targetRef=\"json_to_xml_converter_1\" isImmediate=\"true\"/>"
        },
        {
          "id": "SequenceFlow_1",
          "source": "json_to_xml_converter_1",
          "target": "script_validate_signature",
          "is_immediate": true,
          "xml_content": "<bpmn2:sequenceFlow id=\"SequenceFlow_1\" sourceRef=\"json_to_xml_converter_1\" targetRef=\"script_validate_signature\" isImmediate=\"true\"/>"
        },
        {
          "id": "SequenceFlow_2",
          "source": "script_validate_signature",
          "target": "request_reply_salesforce",
          "is_immediate": true,
          "xml_content": "<bpmn2:sequenceFlow id=\"SequenceFlow_2\" sourceRef=\"script_validate_signature\" targetRef=\"request_reply_salesforce\" isImmediate=\"true\"/>"
        },
        {
          "id": "SequenceFlow_3",
          "source": "request_reply_salesforce",
          "target": "script_transform_data",
          "is_immediate": true,
          "xml_content": "<bpmn2:sequenceFlow id=\"SequenceFlow_3\" sourceRef=\"request_reply_salesforce\" targetRef=\"script_transform_data\" isImmediate=\"true\"/>"
        },
        {
          "id": "SequenceFlow_End",
          "source": "script_transform_data",
          "target": "enricher_format_response",
          "is_immediate": true,
          "xml_content": "<bpmn2:sequenceFlow id=\"SequenceFlow_End\" sourceRef=\"script_transform_data\" targetRef=\"enricher_format_response\" isImmediate=\"true\"/>"
        }
      ]
    }
  ]
}